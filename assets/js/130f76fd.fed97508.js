"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[627],{3044:(e,t,n)=>{n.r(t),n.d(t,{HEIGHT:()=>k,WIDTH:()=>x,assets:()=>c,contentTitle:()=>u,default:()=>S,frontMatter:()=>r,metadata:()=>m,toc:()=>P});var i=n(7462),l=n(7294),s=n(3905),p=n(6456),a=n(9594);function d(){return l.createElement(a.p,{name:"Simple [0, 0] -> [1, 1]",width:300,height:200,range:[0,1],spline:new p.Pi.MultiPoint({compute:e=>e}).addPoint(0,0).addPoint(1,1)})}function o(){return l.createElement(a.p,{name:"Nested with different mapper",width:300,height:200,range:[0,1],spline:new p.Pi.MultiPoint({compute:e=>e}).addPoint(0,0).addPoint(.4,new p.Pi.MultiPoint({compute:e=>2*e-e*e}).addPoint(.2,-1).addPoint(1,1))})}const r={title:"Splines"},u=void 0,m={unversionedId:"splines",id:"splines",title:"Splines",description:"Simple",source:"@site/examples/splines.mdx",sourceDirName:".",slug:"/splines",permalink:"/deepslate/examples/splines",draft:!1,tags:[],version:"current",frontMatter:{title:"Splines"},sidebar:"defaultSidebar",previous:{title:"Noise",permalink:"/deepslate/examples/noise"},next:{title:"Structure Renderer",permalink:"/deepslate/examples/structurerenderer"}},c={},P=[{value:"Simple",id:"simple",level:2},{value:"Nested",id:"nested",level:2}],x=300,k=200,w={toc:P,WIDTH:x};function S(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,i.Z)({},w,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"simple"},"Simple"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const spline = new CubicSpline.MultiPoint<number>({ compute: x => x })\n    .addPoint(0, 0)\n    .addPoint(1, 1)\n\nconst value = spline.compute(0.4)\n")),(0,s.kt)(d,{mdxType:"SimpleExample"}),(0,s.kt)("h2",{id:"nested"},"Nested"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const spline = new CubicSpline.MultiPoint({ compute: x => x })\n    .addPoint(0, 0)\n    .addPoint(0.4, new CubicSpline.MultiPoint({ compute: x => 2 * x - x * x })\n        .addPoint(0.2, -1)\n        .addPoint(1, 1))\n\nconst value = spline.compute(0.4)\n")),(0,s.kt)(o,{mdxType:"NestedExample"}))}S.isMDXComponent=!0}}]);