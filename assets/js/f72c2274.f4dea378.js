"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[642],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>k});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(t),k=a,h=u["".concat(p,".").concat(k)]||u[k]||c[k]||i;return t?r.createElement(h,o(o({ref:n},d),{},{components:t})):r.createElement(h,o({ref:n},d))}));function k(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1865:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=t(7462),a=(t(7294),t(3905));const i={},o="NbtRegion",l={unversionedId:"nbt/region",id:"nbt/region",title:"NbtRegion",description:"Creating an NbtRegion",source:"@site/docs/nbt/region.md",sourceDirName:"nbt",slug:"/nbt/region",permalink:"/deepslate/nbt/region",draft:!1,editUrl:"https://github.com/misode/deepslate/edit/main/website/docs/nbt/region.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"NbtFile",permalink:"/deepslate/nbt/file"},next:{title:"NbtChunk",permalink:"/deepslate/nbt/chunk"}},p={},s=[{value:"Creating an NbtRegion",id:"creating-an-nbtregion",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>getChunkPositions()</code>",id:"getChunkPositions",level:3},{value:"<code>getChunk(index)</code>",id:"getChunk",level:3},{value:"<code>findChunk(x, z)</code>",id:"findChunk",level:3},{value:"<code>getFirstChunk()</code>",id:"getFirstChunk",level:3},{value:"<code>filter(predicate)</code>",id:"filter",level:3},{value:"<code>map(mapper)</code>",id:"map",level:3},{value:"<code>write()</code>",id:"write",level:3},{value:"<code>toJson()</code>",id:"toJson",level:3},{value:"<code>NbtRegion.Ref</code>",id:"Ref",level:2}],d={toc:s};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"nbtregion"},"NbtRegion"),(0,a.kt)("h2",{id:"creating-an-nbtregion"},"Creating an NbtRegion"),(0,a.kt)("p",null,"After obtaining a ",(0,a.kt)("inlineCode",{parentName:"p"},"Uint8Array")," of the region file, you can give it to ",(0,a.kt)("inlineCode",{parentName:"p"},"NbtRegion.read")," to create an ",(0,a.kt)("inlineCode",{parentName:"p"},"NbtRegion"),". This will read the region file header, but it won't read any chunks yet."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const response = await fetch('./r.0.0.mca')\nconst arrayBuffer = await response.arrayBuffer()\nconst region = NbtRegion.read(new Uint8Array(arrayBuffer, {}))\n")),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("h3",{id:"getChunkPositions"},(0,a.kt)("inlineCode",{parentName:"h3"},"getChunkPositions()")),(0,a.kt)("p",null,"Returns a list of the position of each chunk, relative to the region (so the ",(0,a.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"z")," coordinates will always be between ",(0,a.kt)("inlineCode",{parentName:"p"},"0")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"31")," inclusive)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const chunks = region.getChunkPositions()\nconsole.log(chunks) // [[0, 0], [0, 1], [0, 2], [6, 3], [6, 4]]\n")),(0,a.kt)("h3",{id:"getChunk"},(0,a.kt)("inlineCode",{parentName:"h3"},"getChunk(index)")),(0,a.kt)("p",null,"Returns the ",(0,a.kt)("a",{parentName:"p",href:"../chunk"},(0,a.kt)("inlineCode",{parentName:"a"},"NbtChunk"))," by index, or ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," if the chunk doesn't exist."),(0,a.kt)("h3",{id:"findChunk"},(0,a.kt)("inlineCode",{parentName:"h3"},"findChunk(x, z)")),(0,a.kt)("p",null,"Returns the ",(0,a.kt)("a",{parentName:"p",href:"../chunk"},(0,a.kt)("inlineCode",{parentName:"a"},"NbtChunk"))," by its ",(0,a.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"z")," coordinates (region relative), or ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," if the chunk doesn't exist."),(0,a.kt)("h3",{id:"getFirstChunk"},(0,a.kt)("inlineCode",{parentName:"h3"},"getFirstChunk()")),(0,a.kt)("p",null,"Returns the first ",(0,a.kt)("a",{parentName:"p",href:"../chunk"},(0,a.kt)("inlineCode",{parentName:"a"},"NbtChunk"))," in the region, or ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," if this region is completely empty."),(0,a.kt)("h3",{id:"filter"},(0,a.kt)("inlineCode",{parentName:"h3"},"filter(predicate)")),(0,a.kt)("p",null,"Returns a filtered list of ",(0,a.kt)("a",{parentName:"p",href:"../chunk"},(0,a.kt)("inlineCode",{parentName:"a"},"NbtChunk"))," using a predicate. Chunks that are ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," are not checked by the predicate and are filtered out."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const chunks = region.filter(chunk => chunk.x === 0)\n")),(0,a.kt)("h3",{id:"map"},(0,a.kt)("inlineCode",{parentName:"h3"},"map(mapper)")),(0,a.kt)("p",null,"Returns a mapped list of ",(0,a.kt)("a",{parentName:"p",href:"../chunk"},(0,a.kt)("inlineCode",{parentName:"a"},"NbtChunk"))," using a mapper function.  Chunks that are ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," are not mapped and are filtered out."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const compressions = new Set(region.map(chunk => chunk.compression))\nif (compressions.size > 1) {\n    console.log('Region has mixed compression!')\n}\n")),(0,a.kt)("h3",{id:"write"},(0,a.kt)("inlineCode",{parentName:"h3"},"write()")),(0,a.kt)("p",null,"Turns this region into a ",(0,a.kt)("inlineCode",{parentName:"p"},"Uint8Array"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const array = region.write()\n")),(0,a.kt)("h3",{id:"toJson"},(0,a.kt)("inlineCode",{parentName:"h3"},"toJson()")),(0,a.kt)("p",null,"Serializes the region to a format which can be represented by JSON. This can be necessary when using workers."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const json = region.toJson()\n// send the data to a different worker\nconst region2 = NbtRegion.fromJson(json, chunkResolver)\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"For performance reasons, the serialized data does not contain the raw chunk data. The region obtained from ",(0,a.kt)("inlineCode",{parentName:"p"},"NbtRegion.fromJson")," returns an ",(0,a.kt)("a",{parentName:"p",href:"#Ref"},(0,a.kt)("inlineCode",{parentName:"a"},"NbtRegion.Ref")),". ",(0,a.kt)("inlineCode",{parentName:"p"},"chunkResolver")," is necessary to asynchronously request the data of a chunk.")),(0,a.kt)("h2",{id:"Ref"},(0,a.kt)("inlineCode",{parentName:"h2"},"NbtRegion.Ref")),(0,a.kt)("p",null,"A region ref acts very similar to a normal ",(0,a.kt)("inlineCode",{parentName:"p"},"NbtRegion"),", most notable changes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Instead of working with ",(0,a.kt)("a",{parentName:"li",href:"../chunk"},(0,a.kt)("inlineCode",{parentName:"a"},"NbtChunk")),", it uses ",(0,a.kt)("a",{parentName:"li",href:"../chunk/#Ref"},(0,a.kt)("inlineCode",{parentName:"a"},"NbtChunk.Ref")),"."),(0,a.kt)("li",{parentName:"ul"},"It does not have the",(0,a.kt)("inlineCode",{parentName:"li"},"write()")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"toJson()")," methods.")))}c.isMDXComponent=!0}}]);